// Import des modules n√©cessaires
import 'dotenv/config';
import mongoose from 'mongoose' ;
import bcrypt from 'bcrypt';
import inquirer from 'inquirer';
import User from '../models/user.model.js'; // Ton mod√®le User

// Configuration
const MONGO_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/loadingyann';
const SALT_ROUNDS = parseInt(process.env.SALT_ROUNDS) || 10;

// Fonction principale
const createAdminUser = async () => {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true });
    console.log('‚úÖ Connect√© √† MongoDB');

    // Bo√Æte de dialogue pour r√©cup√©rer les informations
    const answers = await inquirer.prompt([
      {
        type: 'input',
        name: 'username',
        message: "Entrez le nom d'utilisateur :",
        validate: (input) => input.length > 0 || "Le nom d'utilisateur ne peut pas √™tre vide.",
      },
      {
        type: 'password',
        name: 'password',
        message: 'Entrez le mot de passe :',
        mask: '*',
        validate: (input) => input.length > 0 || 'Le mot de passe ne peut pas √™tre vide.',
      },
      {
        type: 'list',
        name: 'quality',
        message: "Choisissez le r√¥le de l'utilisateur :",
        choices: ['admin', 'editor', 'viewer'], // Diff√©rents r√¥les possibles
        default: 'admin',
      },
    ]);

    // V√©rifie si l'utilisateur existe d√©j√†
    const existingUser = await User.findOne({ username: answers.username });
    if (existingUser) {
      console.log('‚ö†Ô∏è Un utilisateur avec ce nom existe d√©j√†.');
      return;
    }

    // Hachage du mot de passe
    const hashedPassword = await bcrypt.hash(answers.password, SALT_ROUNDS);

    // Cr√©ation de l'utilisateur
    const newUser = new User({
      username: answers.username,
      password: hashedPassword,
      quality: answers.quality,
    });

    // Sauvegarde dans MongoDB
    await newUser.save();
    console.log(`‚úÖ Utilisateur "${answers.username}" cr√©√© avec succ√®s avec le r√¥le "${answers.quality}" !`);
  } catch (err) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'utilisateur :', err);
  } finally {
    // Fermeture de la connexion
    mongoose.connection.close();
    console.log('üîå Connexion MongoDB ferm√©e');
  }
};

// Lancer la fonction
createAdminUser();
